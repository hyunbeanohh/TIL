/**any 타입 */

/**
 * any 타입은 자바스크립트에 존재하는 모든 값을 오류로 받을 수 있다.
 * 자바스크립트에서의 기본적인 사용 방식과 같으므로 타입을 명시하지 않은 것과 동일한 효과를 나타낸다.
 */
let state: any;

state = { value : 0 };
state = 'hello';
state = 1;
state = true;
state.foo.bar = () => console.log("test");

/**
 * 자연스레 any 타입의 효용성에 대해 의문을 가질 수 있다.
 * 정적 타이핑을 무색하게 만들 수 있기 때문이다.
 * any 타입은 타입스크립트의 타입 시스템을 우회하는 방법이기 때문에 사용을 지양해야 한다.
 * 
 * any 타입을 어쩔 수 없이 사용해야 할 때
 * !개발 단계에서 임시로 값을 지정해야 할 때
 * -> 매우 복잡한 구성 요소로 이루어진 개발 과정에서 추후 값이 변경될 가능성이 있을 경우
 * -> any 타입을 사용하여 임시로 값을 지정하고 추후에 타입을 명시하는 것이 좋다.
 * -> any 타입을 남발할 경우 타입 안정성을 저해할 수 있다.
 * 
 * !어떤 값을 받아올지 또는 넘겨줄지 확실하지 않을 때
 * 예를 들어 API 요청 및 응답 처리, 콜백 함수 전달, 타입이 잘 정제되지 않아 파악이 힘든 외부 라이브러리 등
 * 주고받을 값이 명확하지 않을 때 열린 타입인 any 타입을 사용할 수 있다.
 */

async function load() {
    const res = await fetch('http://..');
    const data = await res.json(); //response.json()의 리턴 타입은 Primise<any>로 정의 돼 있다.
    return data;
}
